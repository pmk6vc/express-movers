name: Actions for pull requests to main

on:
  pull_request:
    branches: [ main ]

env:
  TF_WORKSPACE_NAME: production
  TF_WORKING_DIR: infra

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: PRODUCTION
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Use keyless authentication to authenticate remaining actions
      # This obviously assumes that the service account, IAM roles, and OIDC pools / providers have already been created prior to running pipeline
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          token_format: access_token
          workload_identity_provider: projects/${{ vars.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/tf-managed-pool/providers/tf-managed-pool-provider
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT_ID }}@${{ vars.GCP_PROJECT_ID }}.iam.gserviceaccount.com

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Check Terraform format
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check

      - name: Initialize Terraform
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Select Terraform workspace
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform workspace select $TF_WORKSPACE_NAME

      - name: Validate Terraform
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate -no-color

      - name: Build Terraform plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -no-color
        env:
          TF_VAR_gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ vars.GCP_REGION }}
          TF_VAR_service_account: ${{ vars.GCP_SERVICE_ACCOUNT_ID }}